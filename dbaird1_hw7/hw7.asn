(* Homework Assignment 7
   Programming Languages
   CS471, Spring 2016
   Binghamton University
   Group Members: *)

(* <h1>Instructions</h1> *)

(* This section deals with general submission instructions.
NEW: You are allowed to work in groups for this assignment. If you are working in a group, you MUST indicate your group members in the assignment header --- there has been a 'Group Members:' section added --- otherwise leave it blank. In additional, each group member must submit the assignment --- this is done for record keeping purposes and to ease grading. You will all receive the same grade.


First, grab this assignment's <a href="hw7.asn">template source file</a>. To make things easier for everyone it will contain all questions with space to answer them inside the file. You must submit all answers in this file: Any external code that is required to complete a question should be included in this file as well. NOTE: You don't have to answer inside comments for this assignment. Just place an answer in the templated between questions.

You must tar and gzip your submission, which should include this file along with any code required to complete the assignment. You should name the tarball with your bmail name: The following sequence of commands should be adequate to create and tar a directory of your work -- simply replace 'acanino1' with your bmail name.
*)
mkdir hw7
cd hw7
mv PATH_TO_ASN_FILE .
tar -cvvf acanino1_hw7.tar *
gzip acanino1_hw7.tar

(* Please follow these instructions. If anything confuses you, please send me an email and I will clarify. *)

(* <h1>Homework 6</h1> *)

(* Due: Tuesday 3/22 at 11:59 PM *)

(* <h3>Problem 1:</h3>
Compile and run <a href="hw7.c">hw7.c</a>: <code>gcc -S hw7.c</code>. What happens when you run this code? Depending on the target machine and the compiler, this code will execute differently.  Sometimes this code goes into an infinite loop, sometimes this code terminates, sometimes this code cause a segmentation error.  Can you explain why this code does not behavior consistently?  Think in terms of the AR and the runtime stack. *)

(* <h4>Problem 1 Answer:</h4>
When we ran the code, it terminated. The behavior of the code is dependent on the way the activation record is created. The part of the code that can create problems is the while loop. The reason things may not work as intended is because i++ is in postfix notation, meaning the value of i is evaluated before it is incremented. If the condition for the loop is evaluated to be true, then the value of i is incremented, the code may try to write in values for the array from index 1 to 512 instead of 0 to 511, which would cause a segfault. If the activation record is structured in such a way that the memory location of i comes right after the array, then when the line x[i] = 0 happens, instead of going to the last address of the array, it could access the address where the value of i is stored and update it to 0. If this happens, when the loop goes back to check its condition, it will evaluate to true again and start over. This process will happen continually, creating an infinite loop. *)

(* <h3>Problem 2:</h3>
The C programming language distinguishes between a <i>declaration</i> and <i>definition</i>.
1. What is the difference between a declaration and definition?
2. Which of the following are declarations and which are definitions?
  a. char * a ;
  b. struct * S ;
  c. struct S1 { int x;}
  d. typedef  int * string;
  e. int foo(int i);
  f. static double x[10];
  g. void function() { } *)

(* <h4>Problem 2 Answer:</h4>

2.1) To declare in C, the programmer is telling the compiler that some variable/function/class exists, and has a certain type associated with it. To define in C, the programmer is giving all the information needed in order to create a variable/function/class in its entirety.
2.2 a) char * a; is a declaration
b) struct * S; is a declaration
c) struct S1{ int x;} is a definition
d) typedef int* string; is a definition
e) int foo(int i); is a declaration
f) static double x[10]; is a definition
g) void function(){ } is a definition
*)

(* <h3>Problem 3:</h3>
Page 169 Exercise 3.5 *)

(* <h4>Problem 3 Answer:</h4>
The program will print 5, then 7. Because a is a static variable in a class, it is statically allocated. Since b is a delegate, and delegates are reference types that live on the heap, b is allocated on the heap. Since c is a parameter for a function and d is a locally declared variable, both will be stored on the stack. *)

(* <h3>Problem 4:</h3>
Page 279 Exercise 6.1 *)

(* <h4>Problem 4 Answer:</h4>
These statements are not contradictory. Most languages use left associative arithmetic operators because this is more intuitive from a programmer's perspective. However, as long as the compiler maintains correctness for the whole expression, it does not need evaluate each operand from left to right. *)

(* <h3>Problem 5:</h3>
Page 280 Exercise 6.5 *)

(* <h4>Problem 5 Answer:</h4>
An example of when removing parentheses leads to confusion is when we try to divide a number by a fraction. For example
(/ 8 (/4 2)) = 4, but (/ 8 4 2) = 1.
The issues of precedence and associativity do not arise with prefix or postfix notation so long as the programmer makes sure the order of operations is consistent with what he or she is trying to do mathematically.*)

(* <h3>Problem 6:</h3>
Page 280 Exercise 6.7 *)

(* <h4>Problem 6 Answer:</h4> *)
This is because the address of operator can only be used with variables that have an address associated with them. Because it returns a literal, we cannot use address of operator on the return value of the address of operator.

(* <h3>Problem 7:</h3>
Why is &(&z) not legal in C? *)

(* <h4>Problem 7 Answer:</h4>
This is because the address of operator can only be used with variables that have an address associated with them. Because it returns a literal, we cannot use address of operator on the return value of the address of operator.*)

(* <h3>Problem 8:</h3>
Evaluate the following program fragement in C: *)
int a = 0;
int b = (a++ || ++a) >= (a++ && ++a);
printf( "%d %d", a, b );
(* Show each evaluation step and include the value of a and b.  Finally, display the output. Remember, in Java, C and C++,
&& is a short circuit operator which is always evaluated left to right. The '++' and '--' operators have higher
 precedence than '+' . The '+', additive operator, has higher precedence than '&&'.  The '=' operator has lowest precedence.
  Assume all side effects occur immediately.

Assume that whenever there is an option, operands are evaluated from left to right.

For example: The first two steps look like
int b = (a++ || ++a) >= (a++ && ++a)      a=0   b=?
int b = (0 || ++a) >= (a++ && ++a)        a=1   b=? *)

(* <h4>Problem 8 Answer:</h4>
int b = (a++ || ++a) >= (a++ && ++a)      a=0   b=?
int b = (0 || ++a) >= (a++ && ++a)        a=1   b=?
int b = (0 || 2) >= (a++ && ++a)        a=2   b=?
int b = (0 || 2) >= (a++ && ++a)        a=2   b=?
int b = (0 || 2) >= (2 && ++a)        a=3   b=?
int b = (0 || 2) >= (2 && ++a)        a=3   b=?
int b = (0 || 2) >= (2 && 4)        a=4   b=?
int b = 1 >= (2 && 4)        a=4   b=?
int b = 1 >= 1        a=4   b=?
int b = 1        a=4   b=1
*)

(* <h3>Problem 9:</h3>
Problem 8, excpet that whenever there is an option, operands are evluated from right to left. Here is the problem repeated in full.

Evaluate the following program fragement in C: *)
int a = 0;
int b = (a++ || ++a) >= (a++ && ++a);
printf( "%d %d", a, b );
(* Show each evaluation step and include the value of a and b.  Finally, display the output. Remember, in Java, C and C++, && is a short circuit operator which is always evaluated left to right. The '++' and '--' operators have higher precedence than '+' . The '+', additive operator, has higher precedence than '&&'.  The '=' operator has lowest precedence. Assume all side effects occur immediately.

Assume that whenever there is an option, operands are evaluated from right to left.

For example: The first two steps look like
int b = (a++ || ++a) >= (a++ && ++a)      a=0   b=?
int b = (a++ || ++a) >= (0 && ++a)        a=1   b=? *)

(* <h4>Problem 9 Answer:</h4>
int b = (a++ || ++a) >= (a++ && ++a)      a=0   b=?
int b = (a++ || ++a) >= (0 && ++a)        a=1   b=?
int b = (a++ || ++a) >= (0 && 2)        a=2   b=?
int b = (2 || ++a) >= (0 && 2)        a=3   b=?
int b = (2 || 4) >= (0 && 2)        a=4   b=?
int b = (2 || 4) >= 1        a=4   b=?
int b = 1 >= 1        a=4   b=?
int b = 1        a=4   b=1

*)

(* <h3>Problem 10:</h3>
Python 3 has two built-in sequence types: <i>tuple</i>, immutable sequence and <i>list</i>, mutable sequence. The language provides <i>for</i> loop to iterate through items in any sequence.

The following snippet prints out each item in <code>lst</code> with its sequence number. *)
i = 0
for item in lst :
    i = i+1
    print (repr(i) + " " + repr(item))
(* a. Briefly explain the results of the following statements:
1. <code>seq = [1,2] + [1,2]</code>
2. <code>seq = (1,2) +(1,2)</code>
3. <code>seq = [1,2] + (1,2)</code>

b. Draw a memory diagrahm of the following after each statement is executed:
1. <code>A = [(11,2),[1,2],99]</code>
2. <code>B = [1, A, 99]</code>
3. <code>A[1] = 77</code>

c. Write a python <a href="https://wiki.python.org/moin/Generators">generator</a> called 'gen' that generates the following sequence:<code>[1,2], [3,4], [5,6]</code>.

d. What is the purpose of the functions <i>list</i> and <i>iter</i>?

e. Will the script (above 'a') work if <code>lst</code> is a list?  Will this script work if <code>lst</code> is a tuple?  Will this script work if <code>lst</code> is created by a generator? If it work for more than one type without modification briefly explain why.  If it doesn't work can you modify the code so it work for  all three types -- What problems do you encounter? *)

(* <h4>Problem 10 Answer:</h4>
1. <code>seq = [1,2] + [1,2]</code>
[1,2,1,2]
lists conjoined into one and assigned to seq.
2. <code>seq = (1,2) +(1,2)</code>
(1,2,1,2)
tuples conjoined into one and assigned to seq.
3. <code>seq = [1,2] + (1,2)</code>
Type error, cant concat a tuple to a list

b. Draw a memory diagrahm of the following after each statement is executed:
1. <code>A = [(11,2),[1,2],99]</code>
  A = [(11,2),[1,2],99]
2. <code>B = [1, A, 99]</code>
  A = [(11,2),[1,2],99]
  B = [1,[(11,2),[1,2],99],99]
3. <code>A[1] = 77</code>
  A = [(11, 2), 77, 99]
  B = [1, [(11, 2), 77, 99], 99]

c.
  def gen():
      i = 1
      while(i < 6):
          yield([i, i+1])
          i+=1
d.
  The list function returns a list of all the items in the iterator passed to it (preserves order).
  The iter function returns an iterator for the list passed to it.

f.
  It will work for iter types, list types, and generated lists because they all implement __iter__/__next__ and are therefore "iterable" in python.
*)
